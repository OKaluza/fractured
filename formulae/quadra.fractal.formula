@znext = expression((z^power + (c-a)*z - c) / (z^(power-1) + c - b)); //z(n+1) = 
@bailout = real(100);   //Bailout
@bailoutc = real(0.00005);   //Converge Bailout
@bailfunc = bailout_function(norm);   //Bailout Function
@power = real(2);    //Power
@a = complex(1,0); //a
@b = complex(1,0); //b

//Get next z(n+1), performs an iteration step
void runstep()
{
  z = znext;
}

//Check bailout conditions and return true if bailed out
bool bailed()
{
  //Divergent bailout
  if (bailfunc(z) > bailout) return true;
  //Convergent bailout
  if (bailfunc(z - C(1)) <= bailoutc)
  {
    converged = true;
    return true;
  }
  return false;
}

