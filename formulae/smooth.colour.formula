//Smooth colouring algorithm
//Use power
@~usepower = bool(true);
//Type 2
@~type2 = bool(false);

real ~il, ~lp;

void ~init()
{
  if (~usepower)
    ~il = 1.0/log(power);  //Inverse log of (power).  
  else
    ~il = 1.0/log(2.0);    //Inverse log(2)
 
  //Additional for Smooth 2
  ~lp = log(2.0 * log(sqrt(bailout))) * ~il;
}

rgba ~result(in real repeat)
{
  real mu;
  if (~type2)
    //Smooth2 colouring
    mu = real(count) + ~lp - log(log(cabs(z))) * ~il;
  else
    //Smooth1 colouring
    mu = real(count+1) - log(log(cabs(z))) * ~il;
    
  return gradient(repeat * mu / real(maxiterations));
}


