@bailout = real(100);   //Bailout
@bailoutc = real(0.00005);   //Converge Bailout
@bailfunc = bailout_function(norm);   //Bailout Function
@power = real(2);    //Power
@A = complex(1,0); //A
@B = complex(1,0); //B
@C = complex(1,0); //C
@D = complex(1,0); //D

//Init, called once at start of render
void init()
{
}

//Reset, called once for each pixel before iterating
void reset()
{
}

//Get next z(n+1), performs an iteration step
void runstep()
{
  complex z2;
  if (power == 2.0)
    z2 = mul(z,z);
  else
    z2 = cpow(z,power);

  //Derived from Gumowski-Mira eqn f(x) = ax + 2(1-a)x^2 / (1 + x)
  z = mul(A, z) + div(mul(C, mul(D - B, z2)), D + z2) + c;
}

//Check bailout conditions and return true if bailed out
bool bailed()
{
  //Divergent bailout
  if (bailfunc(z) > bailout) return true;
  //Convergent bailout
  if (bailfunc(z - C(1.0)) <= bailoutc)
  {
    converged = true;
    return true;
  }
  return false;
}

