//Triangle Inequality
@~usepower = bool(true);  //Use power

real ~il, ~lp;
real ~sum = 0.0;
real ~sum2 = 0.0;
real ~ac = 0.0;

void ~init()
{
  if (~usepower)
    ~il = 1.0/log(power);  //Inverse log of (power).  
  else
    ~il = 1.0/log(2.0);    //Inverse log(2)

  ~lp = log(log(bailout)/2.0);
}

void ~reset()
{
  ~sum = 0.0;
  ~sum2 = 0.0;
  ~ac = cabs(c);
}

void ~calc()
{
  ~sum2 = ~sum;
  if (count > 0)
  {
    real az2 = cabs(z - c);
    real lowbound = abs(az2 - ~ac);
    ~sum += (cabs(z) - lowbound) / (az2 + ~ac - lowbound);
  }
}

rgba ~result(in real repeat)
{
  ~sum /= real(count);
  ~sum2 /= real(count - 1);
  real f = ~il * (~lp - log(log(cabs(z))));
  real idx = ~sum2 + (~sum - ~sum2) * (f+1.0);  
  return gradient(repeat * idx);
}

