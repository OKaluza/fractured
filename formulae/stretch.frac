@bailout = real(4);   //Bailout
@power = real(2);    //Power

//Init, called once at start of render
void init()
{
}

//Reset, called once for each pixel before iterating
void reset()
{
}

//Get next z(n+1), performs an iteration step
void runstep()
{
  //(diagonally stretched)
  //z = x + yi
  //x(n+1) = y(n) + x(c)
  //y(n+1) = y(n)^2 - x(n)^2 + y(c)
  if (power == 2.0)
    z = complex(z.y + c.x, z.y * z.y - z.x * z.x + c.y);
  else
     z = complex(z.y + c.x, pow(z.y, power) - pow(z.x, power) + c.y);
}

//Check bailout condition and return true if bailed out
bool bailed()
{
  if (norm(z) > bailout) return true;
  return false;
}

