@znext = expression(z^power + z^power2*c); //z(n+1) = 
@bailout = real(4);   //Bailout
@bailfunc = bailout_function(norm);   //Bailout Function
@power = real(2);    //Power
@power2 = real(0);    //Power 2
@distort = complex(1);    //Distortion

complex ~savez;

//Reset, called once for each pixel before iterating
void reset()
{
  ~savez = C(0);
  z = pixel;
}

//Get next z(n+1), performs an iteration step
void runstep()
{
  complex newz;
  newz = znext + mul(distort,~savez);
  ~savez = z;
  z = newz;
}

//Check bailout condition and return true if bailed out
bool bailed()
{
  if (bailfunc(z) > bailout) return true;
  return false;
}

