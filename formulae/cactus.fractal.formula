@znext = expression(z^power + z*(pixel-1) - pixel); //z(n+1) = 
@bailout = real(4);   //Bailout
@bailfunc = bailout_function(norm);   //Bailout Function
@power = real(3);    //Power

//Reset, called once for each pixel before iterating
void reset()
{
  //Reset fractal, standard doesn't work with this algorithm
  z = pixel;
  if (julia)
    z = selected;
  else
    if (perturb) z = C(0);
}

//Get next z(n+1), performs an iteration step
void runstep()
{
  z = znext;
}

//Check bailout condition and return true if bailed out
bool bailed()
{
  if (bailfunc(z) > bailout) return true;
  return false;
}

