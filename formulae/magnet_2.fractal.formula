@c1 = expression(c-1); //c1 = 
@c2 = expression(c-2); //c2 = 
@znext = expression(((z^3 + 3*z*c1 + c1c2) / (3*z^2 + 3*z*c2 + c1c2 + 1))^power); //z(n+1) = 
@bailout = real(100);   //Bailout
@bailoutc = real(0.00005);   //Converge Bailout
@bailfunc = bailout_function(norm);   //Bailout Function
@power = real(2);    //Power

//Get next z(n+1), performs an iteration step
void runstep()
{
  complex c1c2 = mul(c1,c2);
  z = znext;
}

//Check bailout conditions and return true if bailed out
bool bailed()
{
  //Divergent bailout
  if (bailfunc(z) > bailout) return true;
  //Convergent bailout
  if (bailfunc(z - C(1)) <= bailoutc)
  {
    converged = true;
    return true;
  }
  return false;
}


