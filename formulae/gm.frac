@bailout = real(100);   //Bailout
@bailoutc = real(0.00005);   //Converge Bailout
@power = real(2);    //Power
@a = complex(1,0); //a

//Init, called once at start of render
void init()
{
}

//Reset, called once for each pixel before iterating
void reset()
{
}

//Get next z(n+1), performs an iteration step
void runstep()
{
  complex z2;
  if (power == 2.0)
    z2 = mul(z,z);
  else
    z2 = cpow(z,power);

  //Derived from Gumowski-Mira eqn f(x) = ax + 2(1-a)x^2 / (1 + x)
  z = mul(a, z) + div(mul(C(2.0), mul(C(1.0) - a, z2)), C(1.0) + z) + c;
}

//Check bailout conditions and return true if bailed out
bool bailed()
{
  //Divergent bailout
  if (norm(z) > bailout) return true;
  //Convergent bailout
  if (norm(z - C(1.0)) <= bailoutc)
  {
    converged = true;
    return true;
  }
  return false;
}

