@znext = expression(((z^power2+c-1) / (power2*z+c-2))^power); //z(n+1) = 
@bailout = real(100);   //Bailout
@bailoutc = real(0.00005);   //Converge Bailout
@bailfunc = bailout_function(norm);   //Bailout Function
@power = real(2);    //Power
@power2 = real(2);    //Power 2

//Get next z(n+1), performs an iteration step
void runstep()
{
  //Magnet: z = ((z^b + c - 1) / (b*z + c - 2))^a
  z = znext;
}

//Check bailout conditions and return true if bailed out
bool bailed()
{
  //Divergent bailout
  if (bailfunc(z) > bailout) return true;
  //Convergent bailout
  if (bailfunc(z - C(1)) <= bailoutc) 
  {
    converged = true;
    return true;
  }
  return false;
}

