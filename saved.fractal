[fractal]
width=600
height=600
origin=(0,0)
zoom=0.3339176892895901
rotate=0
selected=(0.46334333333333333,-1.0206706666666667)
julia=1
perturb=0
fractal=mandelbrot
transform=functions
outside_colour=none
inside_colour=exp_smooth

[params.base]
iterations=100
outrepeat=1
inrepeat=1
antialias=1
vary=0

[params.mandelbrot]
bailout=4
bailfunc=arg
power=-2

[formula.mandelbrot]
@bailout = real(4);   //Bailout
@bailfunc = bailout_function(norm);   //Bailout Function
@power = real(2);    //Power

//Get next z(n+1), performs an iteration step
void runstep()
{
  if (power == 2.0)
    //(default mandelbrot)
    z = mul(z,z) + c;
  else
    z = cpow(z, power) + c;
}

//Check bailout condition and return true if bailed out
bool bailed()
{
  if (bailfunc(z) > bailout) return true;
  return false;
}


[params.functions]
fn=abs

[formula.functions]
//Simple transform that applies a function to z
@fn = complex_function(abs);  //Function
void transform()
{
    z = fn(z);
}

[params.exp_smooth]
exp_smooth_out_diverge=true
exp_smooth_out_converge=false
exp_smooth_out_use_zold=true
exp_smooth_in_diverge=true
exp_smooth_in_converge=false
exp_smooth_in_use_zold=true

[formula.exp_smooth]
//Exponential smoothing
@~diverge = bool(true);    //Divergent
@~converge = bool(false);  //Convergent
@~use_zold = bool(false);   //Use previous z

real ~sum = 0.0;
real ~csum = 0.0;

void ~reset()
{
  ~sum = 0.0;
  ~csum = 0.0;  
}

void ~calc()
{
  if (~diverge)
  {
    if (~use_zold)
      ~sum += exp(-cabs(zold - z));
    else
      ~sum += exp(-cabs(z));
  }

  if (~converge)
  {
    if (~use_zold)
      ~csum += exp(-1.0/cabs(zold - z));  
    else
      ~csum += exp(-1.0/cabs(z));  
  }
}

rgba ~result(in real repeat)
{
  real mu;
  if (!~diverge || ~converge && converged)
    mu =  ~csum;
  else 
    mu = ~sum;
    
  return palette(repeat * mu / real(maxiterations));
}


[palette]
Background=rgba(255,255,255,0)
0.000000=rgba(242,236,190,1)
0.052743=rgba(165,236,0,1)
0.118143=rgba(0,36,15,1)
0.132911=rgba(0,91,26,1)
0.156118=rgba(0,0,0,1)
0.172996=rgba(51,49,38,1)
0.189873=rgba(255,229,218,1)
0.204641=rgba(141,102,40,1)
0.229958=rgba(18,12,0,1)
0.341772=rgba(13,18,0,1)
0.390295=rgba(140,105,77,1)
0.409283=rgba(255,243,109,1)
0.419831=rgba(255,246,218,1)
0.478903=rgba(255,245,163,1)
0.495781=rgba(228,193,134,1)
0.580169=rgba(255,242,218,1)
0.603376=rgba(219,130,16,1)
0.622363=rgba(236,90,0,1)
0.639241=rgba(72,17,0,1)
0.660338=rgba(36,24,0,1)
0.839662=rgba(255,255,255,1)
0.864979=rgba(55,119,25,1)
0.879747=rgba(0,91,63,1)
0.902954=rgba(46,144,189,1)
0.930380=rgba(218,236,255,1)
1.000000=rgba(255,255,255,1)